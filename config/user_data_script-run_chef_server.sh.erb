#!/usr/bin/env bash
progresslog='/tmp/user_data-progress.log'

# A url directory with the scripts you'd like to stuff into the machine
REMOTE_FILE_URL_BASE="<%= bootstrap_scripts_url_base %>"

# unscrewup the hostname every way I can think of. Rabbitmq is a real buttmunch
# about the hostname -- it will hang forever on bootstrap if `hostname -s`
# doesn't resolve back to this host. One of the following fixes this, not sure which.
export HOSTNAME=<%= hostname %> 
PUBLIC_IP=<%= public_ip %>                 
kill `cat /var/run/dhclient.eth0.pid` # kill dhclient
bash -c "echo '$HOSTNAME' > /etc/hostname" ;
hostname -F /etc/hostname ;
sysctl -w kernel.hostname=$HOSTNAME ;
# Your /etc/hosts needs to end up looking like this (order is important):
# 127.0.0.1      chef.YOURDOMAIN.COM chef localhost 
# XXX.XXX.XX.XX  chef.YOURDOMAIN.COM chef
sed -i "s/127.0.0.1 *localhost/127.0.0.1      $HOSTNAME `hostname -s` localhost/" /etc/hosts
if grep -q $PUBLIC_IP /etc/hosts  ; then true ; else bash -c "echo '$PUBLIC_IP $HOSTNAME `hostname -s `' >> /etc/hosts" ; fi

# pull in the client scripts that make this machine speak to the chef server
cp /etc/chef/client.rb /etc/chef/client-orig.rb ;
wget -nv ${REMOTE_FILE_URL_BASE}/client.rb -O /etc/chef/client.rb ;
cat > /etc/chef/chef_config.json <<EOF
<%= chef_config_json %>
EOF

# now run chef client against the server itself
service chef-client restart
# for foo in rabbitmq-server couchdb chef-{solr,solr-indexer,server,client,server-webui} ; do sudo service $foo restart ;  done

sudo rabbitmqctl add_vhost /chef
sudo rabbitmqctl add_user chef testing
sudo rabbitmqctl set_permissions -p /chef chef ".*" ".*" ".*"
sudo service chef-server restart

echo "`date` User data script (chef server bootstrap) complete: `date`"  >> $progresslog 
