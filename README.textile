h1. Hadoop Cluster in the Cloud using Chef and Poolparty

h2. Overview

This will help you set up a scalable, efficient hadoop cluster on the Amazon EC2 cloud. It uses Poolparty to create instances, and Chef to provision them after start.

* Chef is declarative: you specify a final state for each node to reach, not a procedure to follow. Adminstration is more efficient, robust and maintainable.
* You get a nice central dashboard to manage clients
* You can easily roll out configuration changes across all your machines
* Chef is actively developed and has well-written recipes for a ton of different software packages.
* Poolparty makes creating amazon cloud machines concise and easy: you can specify spot instances, ebs-backed volumes, disable-api-termination, and more.

h2. Components

* Hadoop
* NFS
* Persistent HDFS on EBS volumes
* Zookeeper (_in progress_)
* Cassandra (_in progress_)

h2. Process

* Install prerequisites
* Set up your local credentials and settings
* Launch chef server
* Try a single-machine cluster
* Launch slaves
* Launch a stand-alone cluster
* Set up EBS volumes
* Launch a cluster with EBS volumes
* Cassandra
* Zookeeper


h2. Recommended cluster composition

We're going to target these two plausible cluster setups:

h3. Small, simple cluster ("Zaius")

A modest, no-fuss cluster to get started:

* Master node acts as chef server, nfs server, hadoop master (namenode, secondarynamenode and jobtracker), hadoop worker.
* 0-5 worker nodes: nfs client, hadoop worker.
* All nodes are EBS-backed instances, sized large enough to hold the HDFS.
* Use non-spot pricing, but manage costs by starting/stopping instances when not in use. (Set 'ebs_delete_on_termination' to false and 'disable-api-termination' to true)

h3. Industrial-strength cluster with persistent HDFS ("Maximus")

A many-node cluster that can be spot priced (or frequently launched/terminated); uses persistent EBS volumes for the HDFS (much more efficient than S3).

* A standalone EBS-backed small instance acting as the chef server and nfs server. Can start/stop when not in use (set 'ebs_delete_on_termination' false and 'disable-api-termination' true) or use a reserved instance.
* Spot-priced master node (namenode, secondarynamenode and jobtracker) that is also a hadoop worker, nfs client, and cassandra node.
* 6-40 spot-priced worker nodes: hadoop worker, nfs client, cassandra node.
* All nodes are local-backed instances with EBS volumes attached at startup.
* You can shut down the cluster (or tolerate EC2 shutting it down if the spot price spikes) without harm to the HDFS. The NFS home dir lets you develop scripts on a small cluster and only spin up the big cluster for production jobs.
* For a larger cluster, you can turn off worker roles for the master node, and can specify the namenode and jobtracker to reside on different machines.
* You can specify any scale of instance depending on whether your job is IO-, CPU- or memory-intensive, and size master and worker nodes independently.

h2. Prerequisites

You should already be familiar with hadoop and with the Amazon cloud.  These scripts are meant to efficiently orchestrate many dependent packages, and the bugs are still being straightened out.

* Choose a name for your cluster. In this example, we'll use 'zaius' for the small cluster and 'maximus' for the big cluster.
* Visit the "aws console":http://bit.ly/awsconsole and ensure you're registered for EC2 and SimpleDB. (You may have to click through a license agreement and check your email)
* Choose your availability zone (spot pricing in the US-East-1 region seems to be the lowest). You *must* set all machines in the cluster to the same availability zone.
* Chef needs a good, durable domain name. Allocate an elastic IP; have your DNS server point both 'chef.yourdomain.com' and 'zaius.yourdomain.com' at that elastic IP.

From now on, I'm going to just use 'chef.yourdomain.com', 'zaius' and 'maximus' without apology, but substitute accordingly.

h2. Install dependencies

Install these gems:

* chef
* configliere
* amazon-ec2
* broham

**NOTE**: Please use the "infochimps branch of poolparty":http://github.com/infochimps/poolparty for spot instance support and other tweaks

* infochimps-poolparty

h2. Set up configuration files and credentials

At this point there's still a lot of moving parts. What I do is to make one directory for all the poolparty, chef, and other config files, and then use symlinks to make everyone happy. (Note: if you're already using the Cloudera hadoop-ec2 scripts some of this is already in place.)

<pre><code>
  mkdir ~/.hadoop-ec2
  mkdir ~/.hadoop-ec2/keypairs
  ln -nfs ~/.hadoop-ec2 ~/.poolparty
  ln -nfs ~/.hadoop-ec2 ~/.chef
</code></pre>

From this code repo dir, copy the template config files over.

<pre><code>
  cd PATH/TO/hadoop_cluster_chef
  cp ./config/knife.rb                 ~/.hadoop-ec2/knife.rb                           
  cp ./config/poolparty-example.yaml   ~/.hadoop-ec2/poolparty.yaml 
  ln -nfs ~/.hadoop-ec2/poolparty.yaml ~/.hadoop-ec2/aws
  # optional:
  ( cd ~/.hadoop-ec2 && git init && git add . && git commit -m "Initial commit" )
</code></pre>

In ~/.chef/knife.rb, enter your the @chef_server_url@

h2. Credentials

We need to stuff in the AWS credentials (use the "aws console":http://bit.ly/awsconsole to get keys and so forth).

* Create keypairs named 'chef' and 'zaius'. Save them as @~/.hadoop-ec2/keypairs/chef.pem@ and @~/.hadoop-ec2/keypairs/zaius.pem@ respectively, and fix their permissions: @chmod 600 ~/.hadoop-ec2/keypairs/*.pem@.
* In the file @~/.hadoop-ec2/poolparty.yaml@,
** Add your AWS access key and secret access key at the top and again under attributes[:aws]
** Put the domain name of your chef server in the top-level attributes[:chef] section, and again in the pools[:chef][:server][:attributes][:node_name].
** Put the elastic IPs you allocated in the right places (chef server, cluster masters)
** If needed, update the region, availability zone and ec2_url. If you change regions you'll have to change the AMI ids too.


h2. Start Chef server

* sudo cat /etc/chef/server.rb for the initial web password.
* for foo in chef-client chef-server chef-server-webui chef-solr chef-solr-indexer ; do sudo service $foo restart ; done

* Click clients, create -- make client called knife_user that is an admin
* paste the text of the private key into @~/.chef/knife_user.pem@
* Copy the text of /etc/chef/validation.pem (from the server) into @~/.chef/chef-validator.pem@
* chmod 600 ~/.chef/*.pem


* @knife cookbook upload --all@
* @for foo in roles/* ; do knife role from file $foo ; done@ (if you have a private cookbooks repo, run it from there, too)

h3. Data bags

* Create a databag @servers_info@ 
** nfs_server {"id":"nfs_server","private_ip":"10.123.45.67"}

* Create a databag @cassandra@ 
** clusters {"id":"clusters","Test":{"keyspaces":{"Twitter":{"replication_factor":"1","columns":{"StatusRelationships":{"CompareSubcolumnsWith":"TimeUUIDType","CompareWith":"UTF8Type","ColumnType":"Super"},"StatusAudits":{"CompareWith":"UTF8Type"},"Statuses":{"CompareWith":"UTF8Type"},"UserRelationships":{"CompareSubcolumnsWith":"TimeUUIDType","CompareWith":"UTF8Type","ColumnType":"Super"},"UserAudits":{"CompareWith":"UTF8Type"},"Usernames":{"CompareWith":"UTF8Type"},"Index":{"CompareWith":"UTF8Type","ColumnType":"Super"},"Users":{"CompareWith":"UTF8Type"}},"replica_placement_strategy":"org.apache.cassandra.locator.RackUnawareStrategy","end_point_snitch":"org.apache.cassandra.locator.EndPointSnitch"}}}}

* create a databag @cluster_ebs_volumes@
<pre><code>
  {"id":"gibbon", "slave":[[{"device":"/dev/sdj","volume_id":"vol-XX0ed8a6","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8a8","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8ac","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8ae","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8b0","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8b6","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8b8","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8ba","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8c4","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8c6","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8c8","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8cc","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8d2","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8d4","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX5af41a","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX5af42c","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8e2","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8e4","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8e6","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8ec","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8ee","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8f0","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0ed8fa","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8fc","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0fd902","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0fd904","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0fd90c","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0fd910","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0fd912","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0fd914","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0fd91e","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0fd922","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0fd924","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc2a","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc2c","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc2e","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc30","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc32","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc3a","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc3c","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc40","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc42","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc44","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc46","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc48","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc4a","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc50","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc52","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc54","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc56","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc58","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc5a","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc5c","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc5e","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc66","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc6e","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XX0adc72","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0adc74","mount_point":"/ebs2"}],[{"device":"/dev/sdj","volume_id":"vol-XXb810a0","mount_point":"/ebs1","options":"defaults,nouuid,noatime"},{"device":"/dev/sdk","volume_id":"vol-XXbb1344","mount_point":"/ebs2","options":"defaults,nouuid,noatime"}]],"master":[[{"device":"/dev/sdj","volume_id":"vol-XX0ed840","mount_point":"/ebs1"},{"device":"/dev/sdk","volume_id":"vol-XX0ed8a4","mount_point":"/ebs2"}]]}
</code></pre>

** zaius
** maxiums

===========================================================================


h2. Set up knife and webui

On the server, run and answer as follows:

<pre><code>
  sudo knife configure -i
  Your chef server URL? http://chef.infochimps.com:4000
  Your client user name? knife_user
  Your validation client user name? chef-validator
  Path to a chef repository (or leave blank)? 
  WARN: Creating initial API user...
</code></pre>  
(note that this is run sudo (so we can see the key files) and that the port is '4000' (server, not webui)

Now copy @~/.chef/knife_user.pem@ and @/etc/chef/validation.pem@ on the server
to (on your computer) @~/.hadoop-ec2/keypairs/knife_user.pem@ and
@~/.hadoop-ec2/keypairs/chef-validator.pem@ respectively; and @chmod og-rwx ~/.hadoop-ec2/keypairs/*.pem@

If you do @knife client list@ you should now see something like

<pre><code>
  [
    "chef-validator", 
    "chef-webui",
    "knife_user"
  ]
</code></pre>

h2. Stock the Chef Server

* Upload your roles and recipes:

<pre><code>
  for foo in roles/*.rb ; do echo $foo ; knife role from file $foo ; done
  knife cookbook upload --all
</code></pre>

(_There are probably a bunch more things in the middle here, please let me know what breaks between that step and the next_)

* Start the hadoop master node:

<pre><code>
  cloud-start -n master  -c clouds/hadoop_clouds.rb
  # ... twiddle thumbs ...
  cloud-ssh   -n server  -c clouds/chef_clouds.rb
</code></pre>

* You will probably need to kickstart chef-client a few times.  Log into the machine as @ubuntu@ user and

<pre><code>
  sudo service chef-client stop
  cd /etc/chef
  tail -f /etc/sv/chef-client/log/main/* &
  sudo chef-client
</code></pre>


* Once the master node starts, try a couple slaves

<pre><code>
  cloud-start -n master  -c clouds/hadoop_clouds.rb
</code></pre>

* Once the cluster works with no EBS volumes, then you should try defining 

h3. Caveats

If you're west, first run from the shell
<pre><code>
  export EC2_URL=https://us-west-1.ec2.amazonaws.com
<pre><code>

h3. Instance attributes: disable_api_termination and delete_on_termination

To set delete_on_termination to 'true' after the fact, run the following
<pre><code>
  ec2-modify-instance-attribute -v i-0704be6c --block-device-mapping /dev/sda1=vol-XX8d2c80::true
</code></pre>
(You'll have to modify the instance and volume to suit)
  
If you set disable_api_termination to true, in order to terminate the node run
<pre><code>
  ec2-modify-instance-attribute -v i-0704be6c --disable-api-termination false
</code></pre>


h3. Debugging

Using @tail -f /etc/sv/chef-server*/log/main/current@ on the chef server can help debug authentication problems



h3. Tradeoffs of EBS-backed volumes

Be careful of the tradeoffs with EBS-backed volumes.

* _good_: You can start and stop instances -- don't pay for the compute from the end of that hour until you restart.
* _good_: It's way easier to tune up an AMI. (Then again, chef makes much of that unnecessary)
* _good_: You can make the volume survive even if the node is terminated (spot price is exceeded, machine crashes, etc).
* _good_: You can make a persistent HDFS without having to fart around attaching EBS volumes at startup. There are performance tradeoffs, though.
* _bad_: The disk is noticably slower. Make sure to point tempfiles and scratch space to the local drives. (The scripts currently handle most but not all of this).
* _bad_: The root volume counts against your quota for EBS volumes.
* _bad_: Starting more than six or so EBS-backed instances can cause AWS to shit a brick allocating all the volumes.

Refer to the standard setups described above.

h2. Information Sharing using simpleDB

* Make sure you log into the "aws console":http://bit.ly/awsconsole and check in as a SimpleDB user. (You have to click through a license agreement, it should approve you within minutes)

sudo bash -c 'export HOSTNAME=gibbon.infinitemonkeys.info ; PUBLIC_IP=204.236.225.16 ; echo $HOSTNAME > /etc/hostname ; hostname -F /etc/hostname ; sysctl -w kernel.hostname=$HOSTNAME ; sed -i "s/127.0.0.1 *localhost/127.0.0.1      $HOSTNAME `hostname -s` localhost/" /etc/hosts ; if grep -q $PUBLIC_IP /etc/hosts ; then true ; else echo $PUBLIC_IP $HOSTNAME `hostname -s ` >> /etc/hosts ; fi'
