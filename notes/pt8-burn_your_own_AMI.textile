
h2. Burn an AMI 

# From your local machine -- bring over your credentials
scp -i ~/.hadoop-ec2/keypairs/gibbon.pem ~/.hadoop-ec2/{aws_private_setup.sh,certs/cert.pem,certs/pk.pem,keypairs/gibbon.pem} ubuntu@ec2-204-236-189-83.us-west-1.compute.amazonaws.com:/tmp

# ... and then on the target machine move them from /tmp to /mnt (which is ignored in bundling)
sudo mv /tmp/*.pem /tmp/aws_private_setup.sh /mnt

# (all following commands are also on the target machine)

# Shutdown services
for foo in hadoop-0.20-{namenode,jobtracker,tasktracker,datanode,secondarynamenode} cassandra couchdb thttpd chef-client nfs-kernel-server rabbitmq-server chef-{solr,solr-indexer,client,server,server-webui} ; do sudo service $foo stop ; done
# and make the following ones not restart on bootup
for foo in hadoop-0.20-{tasktracker,datanode,namenode,jobtracker,secondarynamenode} cassandra ; do sudo update-rc.d -f $foo remove ; done
# Give the process list a how's your father -- nothing interesting should be running.
ps aux
# Unmount anything that's mounted.
mount
sudo umount /home

# Fix the /etc/hosts
# and the hostname

# Give apt some last-minute lovin'
sudo apt-get -y update  ;
sudo apt-get -y upgrade ;
sudo apt-get -f install ;
sudo apt-get clean ;
sudo updatedb ;

# Nuke files that would be inconvenient to persist: chef config and startup files; log files; and files that contain keys of some sort.
history -c
away_dir=/mnt/tmp/away-`date "+%Y%m%d%H"`
sudo mkdir -p $away_dir
sudo mv /var/lib/couchdb/0.10.0/chef.couch /var/lib/rabbitmq/mnesia/rabbit /etc/hostname /etc/chef/{chef_config.json,*.pem,client.rb} $away_dir
sudo rm /var/lib/cloud/data/scripts/* /var/log/chef/* /etc/sv/*/log/main/* /var/log/*.gz /var/log/hadoop/* /tmp/* /var/log/rabbitmq/* /var/log/cassandra/* /var/run/hadoop*/* /var/www/* /var/lib/cloud/data/user-data.txt* /var/lib/cloud/data/*/*
sudo rm -rf /root/{.cache,.chef,emacs.d,.bash_history,.gem} ~ubuntu/{.cache,.chef,emacs.d,.bash_history,.gem}
sudo bash -c 'for foo in /var/log/{dmesg,syslog,messages,debug,udev,lastlog,faillog,dmesg.0,*.log} ; do echo -n > $foo ; done'

sudo rm -rf /data /var/backups/* 
sudo mv /var/chef /etc/hadoop/conf/*.xml /etc/hadoop/conf/*.chef-2* /etc/hadoop/conf/raw_settings.yaml* /etc/cassandra/storage-conf* $away_dir

# If you want to record the AMI version, something like
sudo rm /etc/motd ;
sudo bash -c 'echo "CHIMP CHIMP CHIMP CRUNCH CRUNCH CRUNCH (image burned at `date`)" > /etc/motd ' ;

for foo in /usr/lib/ruby/gems/1.8/gems/wukong-1.4.7/bin/* ; do sudo ln -s $foo /usr/local/bin/ ; done

* Make sure you scrub the userdata scripts from a bootstrapped image before preparing an AMI -- it's surprising behavior to see old config files reappear.

h3. Burning an EBS-backed AMI

Just use the console. MAKE SURE TO STOP, UNMOUNT AND DETACH ALL EBS VOLUMES first.

h3. Burning an Instance-backed (s3) AMIs

move the ssh keys out of the way

mkdir -p $away_dir/ssh ; mv /etc/ssh/ssh_*key* $away_dir/ssh

# Modify the following to suit.  Bundle will complain about excludes that are missing, so adjust until it stops bitching.
cd /mnt
. /mnt/aws_private_setup.sh
CLUSTER=hadoop
AMI_EXCLUDES=/ebs1,/ebs2,/data,/srv/chef/cache,/mnt,/root/.ssh/authorized_keys,/home/ubuntu/.ssh/authorized_keys
export EC2_CERT=/mnt/cert.pem ; export EC2_PRIVATE_KEY=/mnt/pk.pem

AWS_REGION=us-east-1
EC2_URL=https://${AWS_REGION}.ec2.amazonaws.com
ami_bucket=s3amis.infinitemonkeys.info/${CLUSTER}-slave-ami-32bit-`date "+%Y%m%d"`
sudo mkdir -p /mnt/$ami_bucket
# This will take a long fucking time. 15 minutes on a small instance. It fucking sucks.
time sudo ec2-bundle-vol --exclude=$AMI_EXCLUDES -d /mnt/$ami_bucket -k /mnt/pk.pem -c /mnt/cert.pem -u $AWS_ACCOUNT_ID --ec2cert /etc/ec2/amitools/cert-ec2.pem
time ( PATH=/usr/bin:$PATH ; ec2-upload-bundle -b $ami_bucket -m /mnt/$ami_bucket/image.manifest.xml -a $AWS_ACCESS_KEY_ID  -s $AWS_SECRET_ACCESS_KEY ) ;
time ec2-register -K /mnt/pk.pem -C /mnt/cert.pem --region $AWS_REGION -n `basename $ami_bucket` $ami_bucket/image.manifest.xml 

export AWS_REGION=us-west-1
export EC2_URL=https://${AWS_REGION}.ec2.amazonaws.com
ami_bucket=west-s3amis.infinitemonkeys.info/${CLUSTER}-slave-ami-32bit-`date "+%Y%m%d"`
sudo mkdir -p /mnt/`dirname $ami_bucket`
time sudo ec2-bundle-vol --exclude=$AMI_EXCLUDES -r i386 -d /mnt/$ami_bucket -k /mnt/pk.pem -c /mnt/cert.pem -u $AWS_ACCOUNT_ID --ec2cert /etc/ec2/amitools/cert-ec2.pem
# sudo ec2-migrate-manifest --cert /mnt/cert.pem --privatekey /mnt/pk.pem --manifest /mnt/$ami_bucket/image.manifest.xml --region us-west-1 -a $AWS_ACCESS_KEY_ID -s $AWS_SECRET_ACCESS_KEY
time ( PATH=/usr/bin:$PATH ; ec2-upload-bundle -b $ami_bucket -m /mnt/$ami_bucket/image.manifest.xml -a $AWS_ACCESS_KEY_ID  -s $AWS_SECRET_ACCESS_KEY --location $AWS_REGION --url https://s3-us-west-1.amazonaws.com ) ;
time ec2-register -K /mnt/pk.pem -C /mnt/cert.pem --region $AWS_REGION -n $ami_bucket $ami_bucket/image.manifest.xml 
