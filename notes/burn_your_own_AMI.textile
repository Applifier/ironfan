h2. Burn an AMI 

From your local machine, bring over your credentials

<pre><code>
  scp -i ~/.hadoop-ec2/keypairs/zaius.pem ~/.hadoop-ec2/{aws_private_setup.sh,certs/cert.pem,certs/pk.pem,keypairs/zaius.pem} ubuntu@ec2-204-236-189-83.us-west-1.compute.amazonaws.com:/tmp
</code></pre>

On the target machine:
<pre><code>
  # ... move the keys to /mnt (so that they are ignored in the bundling)
  sudo mv /tmp/*.pem /tmp/aws_private_setup.sh /mnt
  
  # Shutdown services
  for foo in hadoop-0.20-{namenode,jobtracker,tasktracker,datanode,secondarynamenode} cassandra couchdb thttpd chef-client nfs-kernel-server rabbitmq-server chef-{solr,solr-indexer,client,server,server-webui} ; do sudo service $foo stop ; done
  # and make the following ones not restart on bootup
  for foo in hadoop-0.20-{tasktracker,datanode,namenode,jobtracker,secondarynamenode} cassandra ; do sudo update-rc.d -f $foo remove ; done
  # Give the process list a how's your father -- nothing interesting should be running.
  ps aux
  # Unmount anything that's mounted,
  sudo umount /home
  sudo umount /ebs1
  # Detatch anything that's attached,
  ec2-detach-volume vol-123545
  # and check that it all worked.
  mount
  ec2-describe-volumes
  
  # Fix /etc/hosts and /etc/hostname
  # Fix /etc/fstab
  
  # Give apt some last-minute lovin'
  sudo apt-get -y update  ;
  sudo apt-get -y upgrade ;
  sudo apt-get -f install ;
  sudo apt-get clean ;
  sudo updatedb ;
  
  # Nuke files that would be inconvenient to persist: chef config and startup files; log files; and files that contain keys of some sort.
  history -c
  away_dir=/mnt/tmp/away-`date "+%Y%m%d%H"`
  sudo mkdir -p $away_dir
  sudo mv /var/lib/couchdb/0.10.0/chef.couch /var/lib/rabbitmq/mnesia/rabbit /etc/hostname /etc/chef/{client-config.json,*.pem,client.rb} $away_dir
  sudo rm /var/lib/cloud/data/scripts/* /var/log/chef/* /etc/sv/*/log/main/* /var/log/*.gz /var/log/hadoop/* /tmp/* /var/log/rabbitmq/* /var/log/cassandra/* /var/run/hadoop*/* /var/www/* /var/lib/cloud/data/user-data.txt* /var/lib/cloud/data/*/*
  sudo rm -rf /root/{.cache,.chef,emacs.d,.bash_history,.gem} ~ubuntu/{.cache,.chef,emacs.d,.bash_history,.gem}
  sudo bash -c 'for foo in /var/log/{dmesg,syslog,messages,debug,udev,lastlog,faillog,dmesg.0,*.log} ; do echo -n > $foo ; done'
  sudo rm -rf /data /var/backups/* 
  sudo mv /var/chef /etc/hadoop/conf/*.xml /etc/hadoop/conf/*.chef-2* /etc/hadoop/conf/raw_settings.yaml* /etc/cassandra/storage-conf* $away_dir
  
  # If you want to record the AMI version, something like
  sudo rm /etc/motd ;
  sudo bash -c 'echo "CHIMP CHIMP CHIMP CRUNCH CRUNCH CRUNCH (image burned at `date`)" > /etc/motd ' ;
</code></pre>

h3. Burning an EBS-backed AMI

Just use the console. MAKE SURE TO STOP, UNMOUNT AND DETACH ALL EBS VOLUMES first.

h3. Burning an Instance-backed (s3) AMIs

move the ssh keys out of the way

<pre><code>
  mkdir -p $away_dir/ssh ; mv /etc/ssh/ssh_*key* $away_dir/ssh
</code></pre>
  
Modify the following to suit.  Bundle will complain about excludes that are missing: adjust until it stops bitching.

<pre><code>
  CLUSTER=hadoop ROLE=slave BITS=32bit
  AWS_ACCOUNT_ID=123456781234 AWS_ACCESS_KEY_ID=2341245 AWS_SECRET_ACCESS_KEY=125324635473465743674637
  AMI_BUCKET=s3amis.infinitemonkeys.info
  AMI_EXCLUDES=/ebs1,/ebs2,/data,/srv/chef/cache,/mnt,/root/.ssh/authorized_keys,/home/ubuntu/.ssh/authorized_keys

  export AWS_REGION=us-east-1 
  export EC2_CERT=/mnt/cert.pem
  export EC2_PRIVATE_KEY=/mnt/pk.pem
  export EC2_URL=https://${AWS_REGION}.ec2.amazonaws.com
  ami_name=${CLUSTER}-${ROLE}-ami-${BITS}-`date "+%Y%m%d"`
  ami_bucket=${AMI_BUCKET}/$ami_name
  
  cd /mnt
  sudo mkdir -p /mnt/$ami_bucket
  # This will take a long fucking time. 15 minutes on a small instance. It fucking sucks.
  time sudo ec2-bundle-vol --exclude=$AMI_EXCLUDES -d /mnt/$ami_bucket -u $AWS_ACCOUNT_ID --ec2cert /etc/ec2/amitools/cert-ec2.pem
  # Only run the following for regions outside of us-east-1
  # time ec2-migrate-manifest      --manifest /mnt/$ami_bucket/image.manifest.xml --region   $AWS_REGION -a $AWS_ACCESS_KEY_ID -s $AWS_SECRET_ACCESS_KEY 
  time ec2-upload-bundle    -b $ami_bucket -m /mnt/$ami_bucket/image.manifest.xml --location $AWS_REGION -a $AWS_ACCESS_KEY_ID -s $AWS_SECRET_ACCESS_KEY 
  time ec2-register -n $ami_name -d $ami_name /mnt/$ami_bucket/image.manifest.xml --region   $AWS_REGION
</code></pre>


# --url https://s3-us-west-1.amazonaws.com 
