h2. Create a generic Chef Client

We're going to grab a generic machine down off the shelf and configure it to be a chef client.  If you'd like to skip this step, there are machine images prepared by opscode and by infochimps that you can use.

For this first step, we'll use the Canonical Ubuntu machine image and pass in a traditional user-data script.  The machine will run it on startup, taking care of most of the generic chef client setup.  Examine @config/user_data_script-bootstrap_chef_client.sh@, and make sure you're cool with everything that's in it. We want to do as little as possible in that script, and let chef do the heavy lifting later.

From your local machine, create the client and then ssh in:
<pre><code>
  cloud-start -n client -c clouds/chef_clouds.rb
  cloud-start -n client -c clouds/chef_clouds.rb
</code></pre>

h3. Tweak generic client

On the remote machine, there are a few things you'll probably want to take care of.

* To watch the progress of the user-data script, run @tail -n5000 -f /var/log/user.log@. Briefly scroll through and make sure it ran successfully.
* By default, the image only allows ssh to the 'ubuntu' user (using the keypair supplied at startup). If you want to be able to ssh in as root: @sudo nano /root/.ssh/authorized_keys@ and remove everything before the 'ssh-rsa'
* If you'd like to enable password-authentication for ssh connections, edit /etc/ssh/sshd_config and set 'PasswordAuthentication yes' (then run @sudo service ssh restart@ to test for errors.)
* Clean out anything revealing @sudo bash -c 'rm -rf /var/log/*.gz /tmp/* /{root,home/ubuntu}/{.emacs.d,.cache,.*hist*,.gem}'@
* Make sure there are *no* client or validation keys on the image: the new userdata scripts will take care of this: @mv /etc/chef/{*~,client.pem,validation.pem} /tmp@

h3. Create an AMI (Machine Image) for the generic chef client

# 'Stop' (don't terminate) the instance.
# Choose 'Instance Actions'/'Create Image (EBS AMI)'. Give it an informative and parseable description such as  'chef.generic-client.00.00.sda1.boot.20100403'
# Copy down the AMI id from the AMI screen in your AWS console.
# Test it out (directions in the next step) Assuming everything went well, you can terminate this instance.

Congrats! You have a generic chef client.  Its behavior is entirely determined
