
cluster_chef cloud_aspects

- cluster => keypair
- cluster => security group
- cluster_family => security group


- I can define the roles for the machine so that it implies
  * chef_role
  * security group  (optional)
  * chef attributes (optional)

- creates sec. groups, applies correct permissions

+ applies keypair to AMI on creation
+ applies sec groups to the AMI on creation

- prepare chef attributes for the node
  * passed in to the user_data, and then into chef via 'json_attribs' -- but
    if this was instead dispatched straight to the chef server that's fine too.
  
- prepare data so node can become friends with chef
  * enough info so node can choose its name
  * validation key
  -- right now this is passed in via the user_data, because ssh'ing to 60
     machines (which all start at different, unpredictable times; not all
     succeed; might be spot priced). So having the machines spring to life with
     *everything* they need to know is fairly important
  


- defines cluster families to have a set # of instances
  + launch is idempotent: if I ask for 10 machines, it checks how many are in
    state 'running' and launches what's left over.
  +


(* it would be good if the databags thing worked with knife *)  
