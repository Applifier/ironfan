
h2. Tips and Notes

If you're west, first run from the shell
<pre><code>
  export EC2_URL=https://us-west-1.ec2.amazonaws.com
<pre><code>

h3. Instance attributes: disable_api_termination and delete_on_termination

To set delete_on_termination to 'true' after the fact, run the following
<pre><code>
  ec2-modify-instance-attribute -v i-0704be6c --block-device-mapping /dev/sda1=vol-XX8d2c80::true
</code></pre>
(You'll have to modify the instance and volume to suit)
  
If you set disable_api_termination to true, in order to terminate the node run
<pre><code>
  ec2-modify-instance-attribute -v i-0704be6c --disable-api-termination false
</code></pre>

h2. Standalone Chef server

h3. installing from apt

You need to have a apt world acct

https://launchpad.net/~jtimberman/+archive/opschef/+packages
sudo add-apt-repository ppa:user/ppa-name

h3. If you have your own chef server already

* make a chef-server sercurity group
* have one of the security groups on your chef server be open to machines in the chef-client group.

h2. Debugging

h3. Debugging chef client (and client on boot-up)

If you installed from bootstrap, runit handles the logs:

<pre><code>
  tail -f -n1000 /etc/sv/chef-client/log/main/current 
</code></pre>

The opscode chef AMIs and the apt both log to @/var/log/chef/client.log@:

<pre><code>
  tail -f -n1000 /var/log/chef/client.log
</code></pre>

In the below we'll tail both files -- feel free to leave off the log file that's uninteresting.

h3. Kickstart the chef-client

* If you need to kickstart the chef-client, log into the machine as @ubuntu@ user and

<pre><code>
  sudo service chef-client stop # so that it doesn't try running while you're experimenting
  cd /etc/chef
  tail -f /etc/sv/chef-client/log/main/current /var/log/chef/client.log &
  sudo chef-client
  # ...
  sudo service chef-client start # once you're done
</code></pre>

If the node is confused about its identity (gives you @`error!': 401 "Unauthorized" (Net::HTTPServerException)@): remove @/etc/chef/client-config.json@ and @/etc/chef/client.pem@ and re-run @sudo chef-client@

h3. Debugging chef everything

<pre><code>
  tail -n200 -f /etc/sv/chef-*/log/main/current
  for foo in rabbitmq-server thttpd couchdb chef-{solr,solr-indexer,client,server,server-webui} cassandra ; do sudo service $foo restart ; done
</code></pre>

h3. If you're having 401 Authentication errors,

* Check the node_name set in client.rb.
* you can edit the node name in /etc/chef/client-config.json file directly, and you can overwrite the /etc/chef/validation.pem file -- the client script will let those settings override the userdata config.
* Once you've checked that, blow away the client.rb file and re-run chef server. It should authenticate as the node name you set.

h3. 'start runsvdir' returned 1, expected 0 

For an error like
<pre><code>
/usr/bin/chef-client:19
/usr/lib/ruby/gems/1.8/gems/chef-0.8.16/bin/../lib/chef/mixin/command.rb:181:in `handle_command_failures': start runsvdir returned 1, expected 0 (Chef::Exceptions::Exec)
	from /usr/lib/ruby/gems/1.8/gems/chef-0.8.16/bin/../lib/chef/mixin/command.rb:124:in `run_command'
	from /usr/lib/ruby/gems/1.8/gems/chef-0.8.16/bin/../lib/chef/provider/execute.rb:49:in `action_run'
	from /usr/lib/ruby/gems/1.8/gems/chef-0.8.16/bin/../lib/chef/runner.rb:60:in `send'
</code></pre>

chef has become confused about the state of the runit coordinating daemon.  No idea why this sometimes happens, but

<pre><code>
sudo restart runsvdir
</code></pre>

and then re-running the chef client seems to usually work

h3. Debug chef server bootstrap

Using on the chef server can help debug authentication problems

<pre><code>
  tail -f -n1000 /tmp/user_data-progress.log /var/log/dpkg.log /etc/sv/chef-client/log/main/current 
</code></pre>

Immediately after If the webui doesn't log you in, try doing @sudo service chef-server-webui restart@ -- it occasionally will fail to create the admin user for some reason.

h3. Debugging hadoop

<pre><code>
  tail -f /var/log/hadoop/hadoop-hadoop-namenode-chef.infochimps.com.log &
  sudo service hadoop-0.20-datanode status
  # ... and so on ...
  sudo service hadoop-0.20-datanode restart
</code></pre>

h3. Cassandra

* Logs are in /etc/

To check that cassandra works as it should:

<pre><code>
  grep ListenAddress /etc/cassandra/storage-conf.xml
  irb
  # jump into irb, and plug your ip address into the line below.
  require 'rubygems' ; require 'cassandra' ; include Cassandra::Constants 
  twitter = Cassandra.new('Twitter', '10.162.67.95:9160')
  user = {'screen_name' => 'buttonscat'} ;
  twitter.insert(:Users, '5', user)
  twitter.get(:Users, '5')  
</code></pre>


h2. EC2 Instance settings

h3. Instance attributes: disable_api_termination and delete_on_termination

To set delete_on_termination to 'true' after the fact, run the following
<pre><code>
  ec2-modify-instance-attribute -v i-0704be6c --block-device-mapping /dev/sda1=vol-e98d2c80::true
</code></pre>
(You'll have to modify the instance and volume to suit)
  
If you set disable_api_termination to true, in order to terminate the node run
<pre><code>
  ec2-modify-instance-attribute -v i-0704be6c --disable-api-termination false
</code></pre>

h3. 

curl http://169.254.169.254/latest/user-data



h2. Doing something to every node

<pre><code>
. ~/.hadoop-ec2/aws_private_setup.sh ; hadoop-ec2 list gibbon > /tmp/gibbon-hosts.log ; cat /tmp/gibbon-hosts.log | cut -f4 > /tmp/gibbon-slaves.log 
</code></pre>

<pre><code>
for foo in `cat /tmp/gibbon-slaves.log` ; do echo $foo ; sshkp $foo 'for svc in chef-client hadoop-0.20-{tasktracker,datanode} ; do sudo service $svc stop ; done' & done
</code></pre>


h2. On-the-fly backup of your namenode metadata

bkupdir=/ebs2/hadoop-nn-backup/`date +"%Y%m%d"`

for srcdir in /ebs*/hadoop/hdfs/ /home/hadoop/gibbon/hdfs/  ; do
  destdir=$bkupdir/$srcdir ; echo $destdir ;
  sudo mkdir -p $destdir ;

done

